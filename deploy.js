const ethers = require("ethers");
const fs = require("fs-extra");
require("dotenv").config();

async function main() {
    const provider = new ethers.providers.JsonRpcProvider(process.env.RPC_URL);
    const wallet = new ethers.Wallet(process.env.PRIVATE_KEY, provider);
    // console.log(process.env.PRIVATE_KEY); // PRINTS the PRIVATE KEY!!!

    // const encryptedJson = fs.readFileSync("./.encryptedKey.json", "utf8");
    // let wallet = new ethers.Wallet.fromEncryptedJsonSync(
    //     encryptedJson,
    //     process.env.PRIVATE_KEY_PASSWORD
    // );
    // wallet = await wallet.connect(provider);

    const abi = fs.readFileSync(
        "./SimpleStorage_sol_SimpleStorage.abi",
        "utf8"
    );
    const binary = fs.readFileSync(
        "./SimpleStorage_sol_SimpleStorage.bin",
        "utf8"
    );
    // contractFactory --> object we use to deploy contracts
    const contractFactory = new ethers.ContractFactory(abi, binary, wallet);
    console.log("Deploying...");
    // Transaction Overrides -> {} (gas price, gas limit..)
    //  const contract = await contractFactory.deploy({ gasPrice: 10000000000000 });
    const contract = await contractFactory.deploy();
    // Transaction Receipt (Wait for a certain number of blocks before attaching to the chain)
    /*const transactionReceipt =*/ await contract.deployTransaction.wait(1);
    /*String interpolation*/ console.log(
        `Contract Address: ${contract.address}`
    );
    // //console.log("Here is the deployment transaction (transaction response): ");
    // //console.log(contract.deployTransaction);
    // //console.log("Here is the transaction receipt: ");
    // //console.log(transactionReceipt);
    // console.log("Let's deploy with only transaction data!");
    // const nonce = await wallet.getTransactionCount();

    // const tx = {
    //   nonce: nonce,
    //   gasPrice: 20000000000,
    //   gasLimit: 1000000,
    //   to: null /*creating a contract*/,
    //   value: 0 /*creating a contract*/,
    //   data: /*bin*/ "0x608060405234801561001057600080fd5b506107b2806100206000396000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c80632e64cec1146100675780634f2be91f146100855780636057361d146100a3578063795fff1d146100bf5780638bab8dd5146100db578063a2f9eac61461010b575b600080fd5b61006f61013c565b60405161007c919061056b565b60405180910390f35b61008d610145565b60405161009a919061056b565b60405180910390f35b6100bd60048036038101906100b891906104ae565b61014e565b005b6100d960048036038101906100d49190610452565b610161565b005b6100f560048036038101906100f09190610409565b6101f7565b604051610102919061056b565b60405180910390f35b610125600480360381019061012091906104ae565b610225565b604051610133929190610586565b60405180910390f35b60008054905090565b60006002905090565b8060008190555061015d61013c565b5050565b6000604051806040016040528083815260200184815250905060028190806001815401808255809150506001900390600052602060002090600202016000909190919091506000820151816000015560208201518160010190805190602001906101cc9291906102e1565b505050816001846040516101e09190610554565b908152602001604051809103902081905550505050565b6001818051602081018201805184825260208301602085012081835280955050505050506000915090505481565b6002818154811061023557600080fd5b906000526020600020906002020160009150905080600001549080600101805461025e9061067f565b80601f016020809104026020016040519081016040528092919081815260200182805461028a9061067f565b80156102d75780601f106102ac576101008083540402835291602001916102d7565b820191906000526020600020905b8154815290600101906020018083116102ba57829003601f168201915b5050505050905082565b8280546102ed9061067f565b90600052602060002090601f01602090048101928261030f5760008555610356565b82601f1061032857805160ff1916838001178555610356565b82800160010185558215610356579182015b8281111561035557825182559160200191906001019061033a565b5b5090506103639190610367565b5090565b5b80821115610380576000816000905550600101610368565b5090565b6000610397610392846105db565b6105b6565b9050828152602081018484840111156103b3576103b2610745565b5b6103be84828561063d565b509392505050565b600082601f8301126103db576103da610740565b5b81356103eb848260208601610384565b91505092915050565b60008135905061040381610765565b92915050565b60006020828403121561041f5761041e61074f565b5b600082013567ffffffffffffffff81111561043d5761043c61074a565b5b610449848285016103c6565b91505092915050565b600080604083850312156104695761046861074f565b5b600083013567ffffffffffffffff8111156104875761048661074a565b5b610493858286016103c6565b92505060206104a4858286016103f4565b9150509250929050565b6000602082840312156104c4576104c361074f565b5b60006104d2848285016103f4565b91505092915050565b60006104e68261060c565b6104f08185610617565b935061050081856020860161064c565b61050981610754565b840191505092915050565b600061051f8261060c565b6105298185610628565b935061053981856020860161064c565b80840191505092915050565b61054e81610633565b82525050565b60006105608284610514565b915081905092915050565b60006020820190506105806000830184610545565b92915050565b600060408201905061059b6000830185610545565b81810360208301526105ad81846104db565b90509392505050565b60006105c06105d1565b90506105cc82826106b1565b919050565b6000604051905090565b600067ffffffffffffffff8211156105f6576105f5610711565b5b6105ff82610754565b9050602081019050919050565b600081519050919050565b600082825260208201905092915050565b600081905092915050565b6000819050919050565b82818337600083830152505050565b60005b8381101561066a57808201518184015260208101905061064f565b83811115610679576000848401525b50505050565b6000600282049050600182168061069757607f821691505b602082108114156106ab576106aa6106e2565b5b50919050565b6106ba82610754565b810181811067ffffffffffffffff821117156106d9576106d8610711565b5b80604052505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b61076e81610633565b811461077957600080fd5b5056fea26469706673582212206d35a9afbb2313116217f32bce74ced189ae4601cddb7a9b3f1cba16cd98a11f64736f6c63430008070033",
    //   chainId: 1337,
    // };
    // const signedTxResponse = await wallet.signTransaction(tx);
    // //const sentTxResponse = await wallet.sendTransaction(tx); // tx signed automatically
    // //await sentTxResponse.wait(1);
    // console.log(sentTxResponse);

    const favNumber = await contract.retrieve();
    console.log(`Current Favorite Number Is: ${favNumber.toString()}`);

    const txResponse = await contract.store("7");
    const txReceipt = await txResponse.wait(1); // wait for the txResponse to finish
    const updatedFavNumber = await contract.retrieve();
    console.log(`Updated Favorite Number Is: ${updatedFavNumber}`);
}

main()
    .then(() => process.exit(0))
    .catch((error) => {
        console.error(error);
        process.exit(1);
    });
